[init]
  templatedir = ~/.git_template
[user]
  name = "Xiaofeng Yuan"
  email = yuan.xiaofeng@gmail.com
[includeIf "gitdir:~/works/sudiyi/project/"]
    path = ~/works/sudiyi/project/.gitconfig
[push]
  default = current
[color]
  ui = auto
[alias]
  ss = status
  aa = !git add . && git status
  au = !git add -u && git status
  ap = add --patch
  br = branch
  ba = branch -a
  ca = commit --amend -v
  ci = commit -v
  co = checkout
  cb = checkout -b
  mg = merge --no-ff
  bm = rebase master
  pr = !hub pull-request
  dsf = "!f() { [ \"$GIT_PREFIX\" != \"\" ] && cd "$GIT_PREFIX"; git diff --color $@ | diff-so-fancy | less --tabs=4 -RFX; }; f"
  up = !git fetch origin && git rebase origin/master
  dup = !git fetch origin && git rebase origin/develop
  devup = !git fetch origin && git rebase origin/dev
  publish = "!git push origin $(git current-branch)"
  unpublish = "!git push origin :$(git current-branch)"
  lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
  co-pr = !sh -c 'git fetch origin pull/$1/head:pr/$1 && git checkout pr/$1' -
  branches = for-each-ref --sort=-committerdate --format=\"%(color:blue)%(authordate:relative)\t%(color:red)%(authorname)\t%(color:white)%(color:bold)%(refname:short)\" refs/remotes
  ctags = "!sh -c '[ -f .git/hooks/ctags ] || git init; .git/hooks/ctags' git-ctags"
  create-branch = !sh -c 'git push origin HEAD:refs/heads/$1 && git fetch origin && git branch --track $1 origin/$1 && cd . && git checkout $1' -
  current-branch = !sh -c 'git rev-parse --abbrev-ref HEAD' -
  delete-branch = !sh -c 'git push origin :refs/heads/$1 && git branch -D $1' -
  merge-branch = !git checkout master && git merge @{-1}
  rename-branch = !sh -c 'old=$(git current-branch) && git branch -m $old $1 && git push origin --set-upstream $1 && git push origin --delete $old' -
  # Unstage any files that have been added to the staging area
  unstage = reset HEAD
  # Show changes that have been staged
  diffc = diff --cached
  # Given a merge commit, find the span of commits that exist(ed) on that
  # branch. Again, not so useful in itself, but used by other aliases.
  merge-span = "!f() { echo $(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f1)$1$(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f2); }; f"
  # Find the commits that were introduced by a merge
  merge-log = "!git log `git merge-span .. $1`"
  # Show the changes that were introduced by a merge
  merge-diff = "!git diff `git merge-span ... $1`"
  times = "!git log --author=\"$(git config user.name)\" --date=iso \
      | perl -nalE 'if (/^Date:\\s+[\\d-]{10}\\s(\\d{2})/) { say $1+0 }' \
      | sort \
      | uniq -c \
      | perl -MList::Util=max -nalE '$h{$F[1]} = $F[0]; }{ $m = max values %h; foreach (0..23) { $h{$_} = 0 if not exists $h{$_} } foreach (sort {$a <=> $b } keys %h) { say sprintf \"%02d - %4d %s\", $_, $h{$_}, \"*\"x ($h{$_} / $m * 50); }'"
[core]
	excludesfile = /Users/xfyuan/.gitignore
  autocrlf = input
[merge]
  ff = only
  tool = vimdiff
[diff]
	tool = vimdiff
[difftool]
	prompt = false
[commit]
  template = ~/.gitmessage
[fetch]
  prune = true
[include]
  path = ~/.gitconfig.local
[credential]
  helper = osxkeychain
